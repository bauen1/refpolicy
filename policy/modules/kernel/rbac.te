policy_module(rbac, 1.0.0)

###########################################################
#
# Role Based Access Control
#


# this domain can transition any object to any role / type
# ignoring the source role
# very dangerous.
attribute rbac_obj_role_change_exempt_uncond_type_attribute;

# this domain can transition any process to any role / type
# ignoring the source role
# very dangerous.
attribute rbac_proc_role_change_exempt_uncond_type_attribute;

# this domain can change the role/type of an object/process as long as the
# target role is a part of rbac_change_role_user_target_role_attribute
# and the target type is a part of rbac_change_role_user_target_object_type_attribute
# or for processes rbac_change_role_user_target_type_attribute
attribute rbac_change_role_user_source_type_attribute;

attribute_role rbac_change_role_user_target_role_attribute;
attribute rbac_change_role_user_target_type_attribute;
attribute rbac_change_role_user_target_object_type_attribute;

###########################################################
#
# Role Based Access Control Seperation
#

# this domain can completely bypass rbacsep
# very dangerous.
attribute rbacsep_exempt_uncond_type_attribute;

# this role can bypass rbacsep as long as the source domain
# is not constrained
# or if the target domain is not a constrained target domain
attribute_role rbacsep_exempt_role_attribute;
rbacsep_exempt_role(system_r)

# always rbacsep constrained, even if source role is unconstrained
attribute rbacsep_constrained_subject_type_attribute;

# always rbacsep constrained as target, even if target role is unconstrained
attribute rbacsep_constrained_target_type_attribute;

# special exceptions for "fd use"
attribute rbacsep_fd_use_subject_type_attribute;
attribute rbacsep_fd_use_target_type_attribute;
